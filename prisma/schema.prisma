// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

//Luego borrar esto
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    nameAt String?
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    transaction   Transaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//Tablas itj 

model Inventary {
    id           String   @id @default(cuid())
    isbn         String   //@index
    status       String   //enum
    format       String   //enum
    condition    String   //enum
    bookOwner    String
    dateAdded    DateTime @default(now())
    lastUpdate   DateTime @updatedAt
    transaction  Transaction[]
}

model Transaction {
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String // relation scalar field (used in the `@relation` attribute above)
  inventary    Inventary    @relation(fields: [inventaryId], references: [id], onDelete: Cascade)
  inventaryId  String // relation scalar field (used in the `@relation` attribute above)
  borrowedDate DateTime  
  dueDate DateTime 
  @@id([userId, inventaryId])
}

